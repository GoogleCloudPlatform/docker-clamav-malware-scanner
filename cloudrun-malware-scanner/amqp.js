const amqp = require('amqplib');
const { logger } = require('./logger.js');

let connection;
let channel;
let exchangeName;

/**
 * Connect to queue
 *
 * @param {object} config
 * @param {string} config.amqpURI
 * @param {string} config.exchangeName
 * @param {string} config.exchangeType
 * @return {Promise<void>}
 */
async function connectQueue(config) {
  try {
    exchangeName = config.exchangeName;

    logger.info('Connecting to RabbitMQ server', { amqpURI: config.amqpURI });
    connection = await amqp.connect(config.amqpURI);
    logger.info('Connected to RabbitMQ server');

    channel = await connection.createChannel();

    // https://amqp-node.github.io/amqplib/channel_api.html#channel_assertExchange
    await channel.assertExchange(config.exchangeName, config.exchangeType, {
      durable: false,
    });
  } catch (error) {
    logger.error('Error connecting RabbitMQ', error);
  }
}

/**
 * Send message to the queue
 * @param {string} object
 * @param {string} routingKey
 * @return {Promise<void>}
 */
const sendMessageToQueue = async ({ message, routingKey }) => {
  try {
    logger.info('Publishing message', { exchangeName, routingKey });
    const buffer = Buffer.from(JSON.stringify(message));
    await channel.publish(exchangeName, routingKey, buffer);
  } catch (error) {
    logger.error(error);
  }
};

module.exports = {
  connectQueue,
  connection,
  channel,
  sendMessageToQueue,
};
