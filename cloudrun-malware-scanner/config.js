/*
* Copyright 2022 Google LLC

* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at

*     https://www.apache.org/licenses/LICENSE-2.0

* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

const {Storage} = require('@google-cloud/storage');
const {logger} = require('./logger.js');
const pkgJson = require('./package.json');

/**
 * Configuration object.
 *
 * Values are read from the JSON configuration file.
 * See {@link readAndVerifyConfig}.
 *
 * @typedef {{
 *    ClamCvdMirrorBucket: string,
 *    comments?: string
 *  }} Config
 */
const Config = null;

const storage = new Storage({
  userAgent: `cloud-solutions/${pkgJson.name}-usage-v${pkgJson.version}`,
});

/**
 * Read configuration from JSON configuration file, verify
 * and return a Config object
 *
 * @async
 * @param {string} configFile
 * @return {Promise<Config>}
 */
async function readAndVerifyConfig(configFile) {
  logger.info(`Using configuration file: ${configFile}`);

  /** @type {Config} */
  let config;

  try {
    config = require(configFile);
    delete config.comments;
  } catch (e) {
    logger.fatal({err: e}, `Unable to read JSON file from ${configFile}`);
    throw new Error(`Invalid configuration ${configFile}`);
  }

  logger.info('BUCKET_CONFIG: ' + JSON.stringify(config, null, 2));

  if (
    !(await checkBucketExists(
      config.ClamCvdMirrorBucket,
      'ClamCvdMirrorBucket',
    ))
  ) {
    throw new Error('Invalid configuration');
  }
  return config;
}

/**
 * Check that given bucket exists. Returns true on success
 *
 * @param {string} bucketName
 * @param {string} configName
 * @return {Promise<boolean>}
 */
async function checkBucketExists(bucketName, configName) {
  if (!bucketName) {
    logger.fatal(`Error in config: no "${configName}" bucket defined`);
    return false;
  }
  // Check for bucket existence by listing files in bucket, will throw
  // an exception if the bucket is not readable.
  // This is used in place of Bucket.exists() to avoid the need for
  // Project/viewer permission.
  try {
    await storage
      .bucket(bucketName)
      .getFiles({maxResults: 1, prefix: 'zzz', autoPaginate: false});
    return true;
  } catch (e) {
    logger.fatal(
      `Error in config: cannot view files in "${configName}" : ${bucketName} : ${e}`,
    );
    logger.debug({err: e});
    return false;
  }
}

exports.Config = Config;
exports.readAndVerifyConfig = readAndVerifyConfig;
