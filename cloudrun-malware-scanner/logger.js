// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * Create a Pino Logger using structured logging to stdout.
 */

const {pino} = require('pino');
const process = require('node:process');

// https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logseverity
const PinoLevelToSeverityLookup = new Map([
  ['trace', 'DEBUG'],
  ['debug', 'DEBUG'],
  ['info', 'INFO'],
  ['warn', 'WARNING'],
  ['error', 'ERROR'],
  ['fatal', 'CRITICAL'],
]);

/**
 * Return a pino log level based on environment variables.
 *
 * @return {string}
 */
function getLogLevel() {
  const envLogLevel = process.env.LOG_LEVEL
    ? process.env.LOG_LEVEL.toLowerCase()
    : null;

  if (envLogLevel && PinoLevelToSeverityLookup.get(envLogLevel)) {
    return envLogLevel;
  } else if (process.env.NODE_ENV?.toLowerCase() === 'test') {
    return 'fatal';
  } else {
    return 'info';
  }
}

/**
 * Convert pino log level to Google severity
 * @param {string} label
 * @param {number} number
 * @returns {Object}
 */
function pinoLevelToStackdriver(label, number) {
  return {
    severity: PinoLevelToSeverityLookup.get(label) || 'INFO',
    level: number,
  };
}

/**
 * Create a JSON fragment string containing the timestamp in Stackdriver format:
 * <pre>
 * "timestamp": {
 *   "seconds": nnnnn,
 *   "nanos": nnnnn
 * }`
 * </pre>
 * @returns {string}
 */
function getStackdriverTimestamp() {
  const millis = Date.now();
  return `,"timestamp":{"seconds":${Math.floor(millis / 1000)},"nanos": ${millis % 1000}000000}`;
}

/** @type {pino.LoggerOptions} */
const pinoConfig = {
  level: getLogLevel(),
  messageKey: 'message',
  formatters: {
    level: pinoLevelToStackdriver,
  },
  timestamp: getStackdriverTimestamp,
};

exports.logger = pino(pinoConfig);
